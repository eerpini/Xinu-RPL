
# Set up cross compiler and toolchain definitions.

CROSS_COMPILE ?= arm-none-eabi-
#CROSS_COMPILE ?= arm-elf-
AS	= $(CROSS_COMPILE)as
LD	= $(CROSS_COMPILE)ld
CC	= $(CROSS_COMPILE)gcc
CPP	= $(CC) -E
AR	= $(CROSS_COMPILE)ar
NM	= $(CROSS_COMPILE)nm
STRIP	= $(CROSS_COMPILE)strip
OBJCOPY = $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump
RANLIB	= $(CROSS_COMPILE)ranlib

# Build CFLAGS and prepend it to user-supplied CFLAGS
CFLAGS_PLAT  ?= -march=armv4t -mtune=arm7tdmi-s -mlong-calls -msoft-float \
		-mthumb-interwork -fno-strict-aliasing -fno-common -ffixed-r8 \
		-ffunction-sections -ffreestanding -fno-builtin -nodefaultlibs
CFLAGS_WARN  ?= -Wcast-align -Wall -Wstrict-prototypes -Wextra 
CFLAGS_OPT   ?= -Os
# CFLAGS_DEBUG ?= -g -DDEBUG -Werror
CFLAGS_DEBUG ?= -g
CFLAGS_MISC  ?= -pipe
CFLAGS := $(CFLAGS_PLAT) $(CFLAGS_WARN) $(CFLAGS_OPT) $(CFLAGS_DEBUG) $(CFLAGS_MISC) -I../include/MC1322x-include $(CFLAGS)

# Thumb flags, used for building most objects
CFLAGS_THUMB ?= -mthumb -mcallee-super-interworking

# Linker flags
LINKERSCRIPT ?= ../compile/mc1322x.lds
LDFLAGS      ?= -T $(LINKERSCRIPT) -nostartfiles -static -export-dynamic -u_start -Wl,-Map=$(@:.elf=.map)

# Assembler flags
AFLAGS       ?= -Wa,-gstabs $(CFLAGS)

# Misc tool options
OBJCOPYFLAGS ?= --gap-fill=0xff
ARFLAGS      = cr

# from Makefile.board
# CFLAGS += -I. -I$(OBJDIR) -I$(MC1322X)/board -DBOARD=$(BOARD)

# from Makefile.lib
# CFLAGS += -I$(MC1322X)/lib/include
# CFLAGS += -I../platforms/MC1322x/include

# from Makefile.src
# CFLAGS += -I$(MC1322X)/src

# Compiler flags - from orig Makefile
# SDEFS	= -I../include

# Special rules for special files

%.o: %.S
	$(CC) $(AFLAGS) -MMD -c -o $@ $<
