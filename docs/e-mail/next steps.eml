Received: from xbh-rcd-102.cisco.com ([72.163.62.139]) by xmb-rcd-202.cisco.com with Microsoft SMTPSVC(6.0.3790.4675);
	 Sun, 22 Jan 2012 08:09:54 -0600
Received: from rcdn-iport-7.cisco.com ([173.37.86.78]) by xbh-rcd-102.cisco.com with Microsoft SMTPSVC(6.0.3790.4675);
	 Sun, 22 Jan 2012 08:09:53 -0600
Received: from rcdn-core2-5.cisco.com ([173.37.113.192])
  by rcdn-iport-7.cisco.com with ESMTP; 22 Jan 2012 14:09:54 +0000
Received: from rcdn-inbound-a.cisco.com (rcdn-inbound-a.cisco.com [72.163.7.170])
	by rcdn-core2-5.cisco.com (8.14.3/8.14.3) with ESMTP id q0ME9s2f002350
	for <rdroms@cisco.com>; Sun, 22 Jan 2012 14:09:54 GMT
Authentication-Results: rcdn-inbound-a.cisco.com; dkim=neutral (message not signed) header.i=none
X-from-outside-Cisco: 128.10.2.6
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: At0IAIwXHE+ACgIG/2dsb2JhbABDng4BkBSBBYFyAQEBAxMBgggQQYdamC+BJwGUUYkFjCYEiDufSg
X-IronPort-AV: E=Sophos;i="4.71,551,1320624000"; 
   d="scan'208";a="23322856"
Received: from newman.cs.purdue.edu ([128.10.2.6])
  by rcdn-inbound-a.cisco.com with ESMTP; 22 Jan 2012 14:09:53 +0000
Received: from lancelot.cs.purdue.edu (lancelot.cs.purdue.edu [128.10.2.26])
	by newman.cs.purdue.edu (8.13.6.20060614/8.13.6/PURDUE_CS-2.0) with ESMTP id q0ME9rpe024815
	for <rdroms@cisco.com>; Sun, 22 Jan 2012 09:09:53 -0500 (EST)
Received: from lancelot.cs.purdue.edu (localhost [127.0.0.1])
	by lancelot.cs.purdue.edu (8.13.6.20060614/8.13.6/PURDUE_CS-2.0) with ESMTP id q0ME9pj5024064
	for <rdroms@cisco.com>; Sun, 22 Jan 2012 09:09:51 -0500 (EST)
Received: (from comer@localhost)
	by lancelot.cs.purdue.edu (8.13.6.20060614/8.13.6/Submit) id q0ME9nAn024063
	for rdroms@cisco.com; Sun, 22 Jan 2012 09:09:49 -0500 (EST)
Date: Sun, 22 Jan 2012 09:09:49 -0500 (EST)
From: Douglas Comer <comer@cs.purdue.edu>
Message-Id: <201201221409.q0ME9nAn024063@lancelot.cs.purdue.edu>
To: rdroms@cisco.com
Subject: next steps
Return-Path: comer@cs.purdue.edu
X-OriginalArrivalTime: 22 Jan 2012 14:09:53.0983 (UTC) FILETIME=[83708CF0:01CCD90F]


  > We ought to coordinate next steps a little.  I'm thinking about going
  > straight to the radio drive code - equivalent to the ethernet driver.

Yes, that seems like the next logical piece.

  > Perhaps your students could use the interrupt-driven UART I/O and the
  > process args problem as problems to get started on. 

OK, I'll try to focus them on that.  I hoped they would have things
set up by this time and be coding.  But... students are not as motivated
these days.

  > The next big architectural issue is how to tackle the 6lowpan sub-IP layer.
  > In summary, the 6lowpan layer fragments/reassembles IP datagrams into
  > 802.15.4 payloads and performs header compression.  The code is messy but
  > not terribly complex.  The issues are: 
  > 
  > * does the 6lowpan layer appear as a separate device interface in XINU

I'm completely ignorant of 6lowpan.  I assume the idea to keep the 6lowpan
layer separate from the underlying physical device layer.  Right?  Does
6lowpan have any cross-device functionality or does it just fragment/reassemble
for one radio device at a time?  I'm asking about the general organization:

            ---------                     ---------     --------- 
           | 6lowpan |                   | 6lowpan |   | 6lowpan |
            ---------                     ---------     ---------
             |     |                          |             |
        -------    -------                 -------       -------
       |Radio 1|  |Radio 2|               |Radio 1|     |Radio 2|
        -------    -------                 -------       -------


  >   - does the 6lowpan layer have a separate process for fragmentation/assembly

The forwarding code I sent uses a separate networking input process for each
underlying phsyical network (because the interface to the device driver is
synchronous).  In volume 2, we used the other approach by demulitplexing packets
at interrupt time.  The use of a separate network input process means we can
have that process handle reassembly and the output process can handle
fragmentation.  The only question that remains is timeout.  We can create a
timer process or may be able to use subsequent packet arrivals to clean up
fragments.  (By the way, are they called "fragments" or is there another
term like "segments" that would avoid ambiguity with IP fragments?)

  >   - how are buffers managed

The real question is what size IP datagrams to allow.  Is there a reason for
datagrams larger than the largest network MTU?  If not, we could choose a
maximum size that's less then 64K.

  > * how is buffer construction/parsing managed
  >   - 802.15.4 has a different header format than Ethernet and uses 16- and
  > 64-bit addresses
  >   - 6lowpan adds header compression so the relative location of the payload
  > in the buffer may change 

Are you suggesting a linked list of pieces rather than a single buffer?  Linked
buffers are messy, but can save space.  Another idea might be to have a
head on each buffer with pointers to pieces in the buffer (each pointer would
actually give the position and length of one piece.  That would accomodate
arbotrary placement of pieces without having a linked list.

  > >> The code tree has been modified a little.  In an attempt to accommodate
  > >> future ports, i tried to isolate platform dependent code in a new
  > directory.   
  > > The problem with an OS is that *man* of the changes seep into the
  > > entire source (little things like whether memory is byte-addressable
  > > or must be word-aligned).
  > No kidding.
  > 
  > You should try reading the Contiki OS code sometime to see what happens when
  > those changes get out of control. 

Hey hey.  I've tried reading Linux code and sometimes have to run it through
the preprocessor just to understand how the defines and ifdefs will turn out.

  > Just to plant a little idea (which you've likely considered before), while
  > there are a plethora of "embedded OSes" floating around, many of the most
  > popular ones have serious (in my mind) drawbacks: 
  > * contiki is just a mess architecturally
  > * TinyOS is implemented in a purpose-buil C-ish language
  > Might be interesting to try to push XINU as a relacement?

Absolutely.  How do we begin?

Doug
