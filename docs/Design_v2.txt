
      Applications that send and receive UDP/TCP/ICMP

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ^        ^       ^           |         |        |
    |        |       |           |         |        |
    |        |       |           V         V        V
udp_recv tcp_recv icmp_recv   tcp_send udp_send icmp_send
    ^        ^       ^           |         |        |
    |        |       |           .         |        |
    |        |       |           .         |        |
    |        |       |           .         |        |
    |        |       |           V         |        |
    |        |       |        -------      |        |
    |        |  ---------...>|tcp_out|     |        |
    |        | |     |        -------      |        |
    |        | |     |           |         |        |
    |        | |     |            -------  |  ------
    |        | |     |                   | | |
 udp_in    tcp_in  icmp_in-----------    | | |
    ^        ^       ^               |   | | |
    |        |       |               |   | | |
    |   -----        |               |   | | |
    |  |             |               |   | | |
    |  |   ----------                |   | | |
    |  |  |           (loopback)     |   V V V
    ip_local<---------------------------ip_send
     ^   ^                           |    |
     |   |                           |    |            -------
     |    --------------------       |    |     -->...|eth_out|------
     |                        |      V    V   /        -------       |
     |  --------------------------->ip_forward                       |
     | |                      |        ^      \        -------       |
     | |                      |        |        -->...|rad_out|--    |
     | |                      |  ------                -------   |   |
     | |                      | |                                |   |
     | |  On input, all of    | |                                |   |
     | |  IP, UDP, TCP, and   | |                                |   |
     | |  ICMP are all in HBO | |                                |   |
============================================================================
     | |                      | |    On output, the MAC address  |   |
     | |                      | |    and iface are filled in,    |   |
     | |                      | |    and all protocols are in    |   |
    ip_in                    ip_in   NBO.  On the 802.15 side,   |   |
      ^   On input, Layer 2    |     individual fraglets are     |   |
      |   headers are in HBO;  |     sent one-at-a-time          |   |
      |   all other headers    |                                 |   |
      |   are in NBO           |                                 |   |
============================================================================
      |                        |                                 |   |
   -------                  -------                              |   |
  | netin |                | netin |                             |   |
   -------                  -------                              |   |
      ^                        ^                                 |   |
      |                        |                                 |   |
***************         ***************                          |   |
*0 (Ethernet) *         * 1 (802.15.4)*     interfaces           |   |
***************         ***************                          |   |
      ^                        ^                                 |   |
      |                        |                                 |   |
  --------                  --------                             |   |
 | eth_in |                | rad_in |                            |   |
  --------                  --------                             |   |
      ^                        ^                                 |   |
      |                        |                                 |   |
      |                     RADIONET<----------------------------    |
      |                                                              |
    ETHER<-----------------------------------------------------------

* A boxed item denotes a process; other names correspond to functions.

* An item surrounded by stars is an interface with an input packet
    queue.  The Ethernet interface can be turned off if the node is
    not a border router.

* ETHER and RADIONET are the names of Xinu devices for the Ethernet
    side and 802.15.4 side.

* The eth_in (Ethernet input) process continually reads packets that
    arrive over the Ethernet and enqueues each incoming packet on the
    interface queue for netin.  If the input queue is full, eth_in
    discards the incoming packet.

* The rad_in (radio input) process continually reads incoming packets,
    collects fraglets for up to N arriving packets.  Once a complete
    has been received datagram, rad_in enqueus the datagram on the
    802.15.4 interface input queue.  If the input queue is full, a
    fraglet arrives out-of-order, or a complete datagram fails to
    arrive, rad_discards the pieces that have arrived.

* The netin process (one per interface) repeatedly extracts the next
    datagram and either calls ip_local to deliver the datagram to the
    local stack, calls ip_forward to forward the datagram, or does
    both by making a copy for the local stack and forwarding (the
    last case is needed for a datagram that has been multicast to
    a network but arrives over another network).

* The tcp_out process handles transmission and retransmission.  When
    an incoming segment arrives, tcp_ip kicks tcp_out to force an ACK
    to be sent.  Similarly, when an application writes data, the
    application places the data in the output buffer and kicks tcp_out
    to force a data segment to be sent.

* The rad_out process accepts an outgoing packet, divides it into a
    sequence of fraglets, and sends each fraglet.

* On the Ethernet side, there's no fragmentation, so the eth_out
    process may be unnecessary.  We should consider whether we could
    just have ip_forward write the packet to the ETHER device (i.e.,
    whether there is any benefit in  an output queue).

* ip_send is only called for outgoing IP datagrams that originate
    from local applications.  It handles loopback and datagrams sent
    to one of the local unicast addresses; it  passes other datagrams
    ip_forward.

* ip_forward accepts outgoing datagrams and enqueues them on one of two
    output queues.  It looks up the destination address and decides
    whether the datagram should go on the Ethernet queue or the 802.15
    queue.  If the interface is already filled in (e.g., the datagram
    is ping reply which must go back over the interface on which it
    arrived or an application has specified the interface to use),
    ip_forward does not check the destination address.  Otherwise,
    ip_forward uses the destination address to select an outgoing
    interface and fills in the IP source address accordingly.

TCP timing: to handle multiple TCP connections simultaneously, we will
need to have timed events as well as immediate events.  For example, we
may have retransmission timers running for K connections.  Furthermore,
the timeouts may not all be the same (some may be much larger than others).
Consequently, it will not be sufficient to block tcp_out waiting for an
ACK on a given connection; we need a general-purpose event mechanism.
One way to handle it consists of a timer process.  We need to think
about whether we can manage events with only one process.

02/28/2012 NOTES - Ralph Droms
==============================
XINU_MC1322_20120228.droms.tar.gz

Implemented functions and notes:

Processes
---------

rad_in: receives 802.15.4 frames through read(RADIO0, ...).
Decompresses 802.15.4 frame into a netpacket structure.  Enqueues
netpacket on radio interface, iftab[0], for net_in.
TODO:
  * destination radio address processing; radio is currently in
    promiscuous mode and receives all radio traffic
  * fraglet processing
  * check for protected access to iftab[0] with net_in
  * miscellaneous unimplemented compression modes
  * netpacket pool chared among input and output interfaces

net_in: receives netpacket, including radio, IP, ICMP/UDP/TCP headers
and payload.  Calls pdump6 to display received packet.  Returns packet
buffer to netpacket pool.
TODO:
  * design interfaces to upper level protocols
  * ICMPv6 message processing

net_out: receives netpacket with (optional) radio, IP, ICMP/UDP/TCP
headers and payload.  Fills in headers as required.  Enqueues complete
netpacket on radio intrface for rad_out.
TODO:
  * header completion; e.g., unicast destination address (IP->radio)
    resolution 
  * checksum correct?

rad_out: receives complete netpacket.  Compresses radio and IP headers
into radio driver packet.  Sends packet to radio driver; returns
netpacket buffer to netpacket free pool.
TODO:
  * fragletting


Buffer flows, netpacket:
------------------------
rad_in: obtains netpacket buffer, fills from received radio frame
net_in: displays netpacket contents, returns netpacket buffer

main: obtains netpacket buffer, fills with hand-crafted Echo Request
rad_out: converts to radio format (compression), returns netpacket
  buffer


Buffer flows, radio packet:
---------------------------
radio driver: obtains radio packet, fills with received frame
rad_in: decompresses radio frame, returns radio driver

rad_out: obtains radio packet, fills with compressed frame from
  netpacket
radio driver: sends frame, returns radio packet

