No changes to application protocols, TCP, UDP

Input:
ip_in receives complete, "native" IPv6 datagrams and demuxes
to ICMP (including ND [Neighbor Discovery]), UDP and TCP modules
- may be called from either 6lowpan_in or eth_in
- received datagram includes L2 addresses

one netin process per interface (one for Ethernet, one for 802.15.4)
* ethNetin accepts frames from Ethernet interface, filters unwanted
  frames, reassembles fragmented datagrams and then calls ip_in
* 6lowpanNetin accepts frames from 802.15.4, filters unwanted stuff,
  reassembles 802.15.4 fraglets

6lowpan_in receives frames from radio layer and:
- decompresses 802.15.4 and IPv6 headers
- reassembles 802.15.4 fraglets
- reports lqi for routing
- passes full IPv6 datagrams to ip_in

radioRead:
 wait(radio-isem)
 get full MACA buffer from queue
 copy payload to parameter buffer
 free MACA buffer

rx_packet dequeues full MACA buffer from queue and returns to caller

maca_isr gets empty MACA buffer, fills with received frame, adds to
receive queue and signals radio-isem


Output:

producer fills IP buffer and puts on IP output queue

ethIPout process
  chooses next hop address and interface (routing)
  hands IP buffer to 6lowpan

6lowpanIPout process
  sends next fraglet if current IP datagram not finished
else
  gets next IP datagram from queue
  applies header compression
  generates 802.15.4 fraglets if necessary
  

Design issues
* acknowledgment and retry
* 6lowpan output process with queue betwen ipout and 6lowpan?
* same code for 6lowpanNetin and ethNetin?
* missing fraglets policy: tentatively watch for missing fraglets and
  flush
* allow for "small number" of simultaneous datagram reassembly
* representation of 802.15.4 and Ethernet frames in a buffer
* start with input process per interface; 6lopwan/radio input process
  reassembles fraglets; both 6lowpan/radio and ethernet input
  processes put complete IPv6 datagrams on interface input queue

Doug:
two kinds of output: radio and Ethernet
   output process for radio: grabs a datagram and sends fraglets
   output process for Ethernet
   ip_enqueue decides which output to dump the outbound datagram into
work on diagram

Ralph:
send pointers to original ND RFC and the 6lowpan-nd draft
look up the details of using 16- and 64-bit addresses (when used, how
  does claim and defend work?)

=====
6lowpan

6lowpan input processing will be implemented in a separate process.
The process willl read receivd frames from the radio interface,
process the frames into IP datagrams and deliver the datagrams to a
queue for the net_in process.

After the frame is receieved, the 6lowpan process decompresses the
destination address to determine if the receiving node should process
the frame.  If the frame is to be processed and is not a fraglet, it
is immediately decompressed into a XINU IP buffer and enqueued for the
net_in process.

If the frame is a "first fraglet," a new XINU buffer is allocated and
initialized for fraglet reassembly.  If the frame is not a first
fraglet, it is processed with the corresponding reassembly buffer. The
fraglet is discarded if it is out of order if there is no
corresponding buffer (assumes any successfully received fraglets will
be received in order and missing fraglets are lost).

Once a fragleted datagram is reassembled, the 6lowpan decompresses the
headers and enquese the datagram for net_in.

Reassembly buffer timeout is performed by the clock interrupt
routine.  At each clock interrupt, the reassembly buffer timers are
decremented and any expired buffers are discarded.  Subsequent
fraglets arriving after a reassembly buffer is discarded are also
discarded.

6lowpan output processing will also be implemented as a separate
process.  net_out will enqueue output datagrams for the 6lowpan output
process, which will fraglet as required and call radioWrite.  The
6lowpan output process may block because of radio layer buffer
exhaustion.

Design decisions:
1. Using a separate 6lowpan process; might be possible to combine with
net_in process?  Using separate process allows resuse of identical
code for radio net_in and ethernet net_in.
2. What are the buffer flows for XINU and radio layer buffers?  At
present, radio layer buffers are only used below radioRead and data is
copied into a buffer supplied to radioRead.  The initial design will
call radioRead with a XINU buffer.  Received fraglets will be copied
into the reassembly buffer.
3. Use a separate process with timed events instead of reassembly
buffer management in clock interrupt routine?
